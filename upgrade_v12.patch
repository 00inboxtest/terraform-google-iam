diff --git a/Makefile b/Makefile
index a1b9267..7a74cef 100644
--- a/Makefile
+++ b/Makefile
@@ -12,54 +12,53 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
+# Please note that this file was generated from [terraform-google-module-template](https://github.com/terraform-google-modules/terraform-google-module-template).
+# Please make sure to contribute relevant changes upstream!
+
 # Make will use bash instead of sh
 SHELL := /usr/bin/env bash
 
 # Docker build config variables
-BUILD_TERRAFORM_VERSION ?= 0.11.10
-BUILD_CLOUD_SDK_VERSION ?= 216.0.0
-BUILD_PROVIDER_GOOGLE_VERSION ?= 1.19.1
-BUILD_PROVIDER_GSUITE_VERSION ?= 0.1.10
-DOCKER_IMAGE_TERRAFORM := cftk/terraform
-DOCKER_TAG_TERRAFORM ?= ${BUILD_TERRAFORM_VERSION}_${BUILD_CLOUD_SDK_VERSION}_${BUILD_PROVIDER_GOOGLE_VERSION}_${BUILD_PROVIDER_GSUITE_VERSION}
-BUILD_RUBY_VERSION ?= 2.5.3
-DOCKER_IMAGE_KITCHEN_TERRAFORM := cftk/kitchen_terraform
-DOCKER_TAG_KITCHEN_TERRAFORM ?= ${BUILD_TERRAFORM_VERSION}_${BUILD_CLOUD_SDK_VERSION}_${BUILD_PROVIDER_GOOGLE_VERSION}_${BUILD_PROVIDER_GSUITE_VERSION}
+CREDENTIALS_PATH 			?= /cft/workdir/credentials.json
+DOCKER_ORG 				:= gcr.io/cloud-foundation-cicd
+DOCKER_TAG_BASE_KITCHEN_TERRAFORM 	?= 2.0.0
+DOCKER_REPO_BASE_KITCHEN_TERRAFORM 	:= ${DOCKER_ORG}/cft/kitchen-terraform:${DOCKER_TAG_BASE_KITCHEN_TERRAFORM}
 
+# All is the first target in the file so it will get picked up when you just run 'make' on its own
+.PHONY: all
+all: check generate_docs
 
-all: check_shell check_python check_golang check_terraform check_docker check_base_files test_check_headers check_headers check_trailing_whitespace generate_docs ## Run all linters and update documentation
+# Run all available linters
+.PHONY: check
+check: check_shell check_python check_golang check_terraform check_docker check_base_files test_check_headers check_headers check_trailing_whitespace
 
 # The .PHONY directive tells make that this isn't a real target and so
 # the presence of a file named 'check_shell' won't cause this target to stop
 # working
 .PHONY: check_shell
-check_shell: ## Lint shell scripts
+check_shell:
 	@source test/make.sh && check_shell
 
 .PHONY: check_python
-check_python: ## Lint Python source files
+check_python:
 	@source test/make.sh && check_python
 
 .PHONY: check_golang
-check_golang: ## Lint Go source files
+check_golang:
 	@source test/make.sh && golang
 
 .PHONY: check_terraform
 check_terraform:
-	@source ## Lint Terraform source files
+	@source test/make.sh && check_terraform
 
 .PHONY: check_docker
-check_docker: ## Lint Dockerfiles
+check_docker:
 	@source test/make.sh && docker
 
 .PHONY: check_base_files
 check_base_files:
 	@source test/make.sh && basefiles
 
-.PHONY: check_shebangs
-check_shebangs: ## Check that scripts have correct shebangs
-	@source test/make.sh && check_bash
-
 .PHONY: check_trailing_whitespace
 check_trailing_whitespace:
 	@source test/make.sh && check_trailing_whitespace
@@ -70,22 +69,16 @@ test_check_headers:
 	@python test/test_verify_boilerplate.py
 
 .PHONY: check_headers
-check_headers: ## Check that source files have appropriate boilerplate
-	@echo "Checking file headers"
-	@python test/verify_boilerplate.py
+check_headers:
+	@source test/make.sh && check_headers
 
 # Integration tests
 .PHONY: test_integration
-test_integration: ## Run integration tests
-	bundle install
-	bundle exec kitchen create
-	bundle exec kitchen converge
-	bundle exec kitchen converge
-	bundle exec kitchen verify
-	bundle exec kitchen destroy
+test_integration:
+	test/ci_integration.sh
 
 .PHONY: generate_docs
-generate_docs: ## Update README documentation for Terraform variables and outputs
+generate_docs:
 	@source test/make.sh && generate_docs
 
 # Versioning
@@ -93,62 +86,64 @@ generate_docs: ## Update README documentation for Terraform variables and output
 version:
 	@source helpers/version-repo.sh
 
-# Build Docker
-.PHONY: docker_build_terraform
-docker_build_terraform:
-	docker build -f build/docker/terraform/Dockerfile \
-		--build-arg BUILD_TERRAFORM_VERSION=${BUILD_TERRAFORM_VERSION} \
-		--build-arg BUILD_CLOUD_SDK_VERSION=${BUILD_CLOUD_SDK_VERSION} \
-		--build-arg BUILD_PROVIDER_GOOGLE_VERSION=${BUILD_PROVIDER_GOOGLE_VERSION} \
-		--build-arg BUILD_PROVIDER_GSUITE_VERSION=${BUILD_PROVIDER_GSUITE_VERSION} \
-		-t ${DOCKER_IMAGE_TERRAFORM}:${DOCKER_TAG_TERRAFORM} .
-
-.PHONY: docker_build_kitchen_terraform
-docker_build_kitchen_terraform:
-	docker build -f build/docker/kitchen_terraform/Dockerfile \
-		--build-arg BUILD_TERRAFORM_IMAGE="${DOCKER_IMAGE_TERRAFORM}:${DOCKER_TAG_TERRAFORM}" \
-		--build-arg BUILD_RUBY_VERSION="${BUILD_RUBY_VERSION}" \
-		-t ${DOCKER_IMAGE_KITCHEN_TERRAFORM}:${DOCKER_TAG_KITCHEN_TERRAFORM} .
-
 # Run docker
 .PHONY: docker_run
-docker_run: ## Launch a shell within the Docker test environment
+docker_run:
 	docker run --rm -it \
-		-v $(CURDIR):/cftk/workdir \
-		${DOCKER_IMAGE_KITCHEN_TERRAFORM}:${DOCKER_TAG_KITCHEN_TERRAFORM} \
-		/bin/bash
+		-e PROJECT_ID \
+		-e SERVICE_ACCOUNT_JSON \
+		-e GOOGLE_APPLICATION_CREDENTIALS=${CREDENTIALS_PATH} \
+		-v $(CURDIR):/cft/workdir \
+		${DOCKER_REPO_BASE_KITCHEN_TERRAFORM} \
+		/bin/bash -c "source test/ci_integration.sh && setup_environment && exec /bin/bash"
 
 .PHONY: docker_create
-docker_create: ## Run `kitchen create` within the Docker test environment
+docker_create:
 	docker run --rm -it \
-		-v $(CURDIR):/cftk/workdir \
-		${DOCKER_IMAGE_KITCHEN_TERRAFORM}:${DOCKER_TAG_KITCHEN_TERRAFORM} \
-		/bin/bash -c "kitchen create"
+		-e PROJECT_ID \
+		-e SERVICE_ACCOUNT_JSON \
+		-e GOOGLE_APPLICATION_CREDENTIALS=${CREDENTIALS_PATH} \
+		-v $(CURDIR):/cft/workdir \
+		${DOCKER_REPO_BASE_KITCHEN_TERRAFORM} \
+		/bin/bash -c "source test/ci_integration.sh && setup_environment && kitchen create"
 
 .PHONY: docker_converge
-docker_converge: ## Run `kitchen converge` within the Docker test environment
+docker_converge:
 	docker run --rm -it \
-		-v $(CURDIR):/cftk/workdir \
-		${DOCKER_IMAGE_KITCHEN_TERRAFORM}:${DOCKER_TAG_KITCHEN_TERRAFORM} \
-		/bin/bash -c "kitchen converge && kitchen converge"
+		-e PROJECT_ID \
+		-e SERVICE_ACCOUNT_JSON \
+		-e GOOGLE_APPLICATION_CREDENTIALS=${CREDENTIALS_PATH} \
+		-v $(CURDIR):/cft/workdir \
+		${DOCKER_REPO_BASE_KITCHEN_TERRAFORM} \
+		/bin/bash -c "source test/ci_integration.sh && setup_environment && kitchen converge"
 
 .PHONY: docker_verify
-docker_verify: ## Run `kitchen verify` within the Docker test environment
+docker_verify:
 	docker run --rm -it \
-		-v $(CURDIR):/cftk/workdir \
-		${DOCKER_IMAGE_KITCHEN_TERRAFORM}:${DOCKER_TAG_KITCHEN_TERRAFORM} \
-		/bin/bash -c "kitchen verify"
+		-e PROJECT_ID \
+		-e SERVICE_ACCOUNT_JSON \
+		-e GOOGLE_APPLICATION_CREDENTIALS=${CREDENTIALS_PATH} \
+		-v $(CURDIR):/cft/workdir \
+		${DOCKER_REPO_BASE_KITCHEN_TERRAFORM} \
+		/bin/bash -c "source test/ci_integration.sh && setup_environment && kitchen verify"
 
 .PHONY: docker_destroy
-docker_destroy: ## Run `kitchen destroy` within the Docker test environment
+docker_destroy:
 	docker run --rm -it \
-		-v $(CURDIR):/cftk/workdir \
-		${DOCKER_IMAGE_KITCHEN_TERRAFORM}:${DOCKER_TAG_KITCHEN_TERRAFORM} \
-		/bin/bash -c "kitchen destroy"
+		-e PROJECT_ID \
+		-e SERVICE_ACCOUNT_JSON \
+		-e GOOGLE_APPLICATION_CREDENTIALS=${CREDENTIALS_PATH} \
+		-v $(CURDIR):/cft/workdir \
+		${DOCKER_REPO_BASE_KITCHEN_TERRAFORM} \
+		/bin/bash -c "source test/ci_integration.sh && setup_environment && kitchen destroy"
 
 .PHONY: test_integration_docker
-test_integration_docker: docker_create docker_converge docker_verify docker_destroy ## Run a full integration test cycle
-	@echo "Running test-kitchen tests in docker"
+test_integration_docker:
+	docker run --rm -it \
+		-e PROJECT_ID \
+		-e SERVICE_ACCOUNT_JSON \
+		-e GOOGLE_APPLICATION_CREDENTIALS=${CREDENTIALS_PATH} \
+		-v $(CURDIR):/cft/workdir \
+		${DOCKER_REPO_BASE_KITCHEN_TERRAFORM} \
+make test_integration
 
-help: ## Prints help for targets with comments
-	@grep -E '^[a-zA-Z._-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'
diff --git a/folders_iam.tf b/folders_iam.tf
index a862280..1a894ab 100644
--- a/folders_iam.tf
+++ b/folders_iam.tf
@@ -18,23 +18,35 @@
   Folder IAM binding authoritative
  *****************************************/
 resource "google_folder_iam_binding" "folder_iam_authoritative" {
-  count = "${local.folders_authoritative_iam ? length(local.bindings_array) : 0}"
+  count = local.folders_authoritative_iam ? length(local.bindings_array) : 0
 
-  folder = "folders/${replace(element(split(" ", local.bindings_array[count.index]), 0), "folders/", "")}"
-  role   = "${element(split(" ", local.bindings_array[count.index]), 1)}"
+  folder = "folders/${replace(
+    element(split(" ", local.bindings_array[count.index]), 0),
+    "folders/",
+    "",
+  )}"
+  role = element(split(" ", local.bindings_array[count.index]), 1)
 
-  members = [
-    "${compact(split(" ", element(split("=", local.bindings_array[count.index]), 1)))}",
-  ]
+  members = compact(
+    split(
+      " ",
+      element(split("=", local.bindings_array[count.index]), 1),
+    ),
+  )
 }
 
 /******************************************
   Folder IAM binding additive
  *****************************************/
 resource "google_folder_iam_member" "folder_iam_additive" {
-  count = "${local.folders_additive_iam ? length(local.bindings_array) : 0}"
+  count = local.folders_additive_iam ? length(local.bindings_array) : 0
 
-  folder = "folders/${replace(element(split(" ", local.bindings_array[count.index]), 0), "folders/", "")}"
-  member = "${element(split(" ", local.bindings_array[count.index]), 1)}"
-  role   = "${element(split(" ", local.bindings_array[count.index]), 2)}"
+  folder = "folders/${replace(
+    element(split(" ", local.bindings_array[count.index]), 0),
+    "folders/",
+    "",
+  )}"
+  member = element(split(" ", local.bindings_array[count.index]), 1)
+  role   = element(split(" ", local.bindings_array[count.index]), 2)
 }
+
diff --git a/kms_crypto_keys_iam.tf b/kms_crypto_keys_iam.tf
index f7b06ca..64c3b5e 100644
--- a/kms_crypto_keys_iam.tf
+++ b/kms_crypto_keys_iam.tf
@@ -18,23 +18,27 @@
   Kms Crypto Key IAM binding authoritative
  *****************************************/
 resource "google_kms_crypto_key_iam_binding" "kms_crypto_key_iam_authoritative" {
-  count = "${local.kms_cryto_keys_authoritative_iam ? length(local.bindings_array) : 0}"
+  count = local.kms_cryto_keys_authoritative_iam ? length(local.bindings_array) : 0
 
-  crypto_key_id = "${element(split(" ", local.bindings_array[count.index]), 0)}"
-  role          = "${element(split(" ", local.bindings_array[count.index]), 1)}"
+  crypto_key_id = element(split(" ", local.bindings_array[count.index]), 0)
+  role          = element(split(" ", local.bindings_array[count.index]), 1)
 
-  members = [
-    "${compact(split(" ", element(split("=", local.bindings_array[count.index]), 1)))}",
-  ]
+  members = compact(
+    split(
+      " ",
+      element(split("=", local.bindings_array[count.index]), 1),
+    ),
+  )
 }
 
 /******************************************
   Kms Crypto Key IAM binding additive
  *****************************************/
 resource "google_kms_crypto_key_iam_member" "kms_crypto_key_iam_additive" {
-  count = "${local.kms_cryto_keys_additive_iam ? length(local.bindings_array) : 0}"
+  count = local.kms_cryto_keys_additive_iam ? length(local.bindings_array) : 0
 
-  crypto_key_id = "${element(split(" ", local.bindings_array[count.index]), 0)}"
-  member        = "${element(split(" ", local.bindings_array[count.index]), 1)}"
-  role          = "${element(split(" ", local.bindings_array[count.index]), 2)}"
+  crypto_key_id = element(split(" ", local.bindings_array[count.index]), 0)
+  member        = element(split(" ", local.bindings_array[count.index]), 1)
+  role          = element(split(" ", local.bindings_array[count.index]), 2)
 }
+
diff --git a/kms_key_rings_iam.tf b/kms_key_rings_iam.tf
index 4725475..8026158 100644
--- a/kms_key_rings_iam.tf
+++ b/kms_key_rings_iam.tf
@@ -18,23 +18,27 @@
   Kms Key Ring IAM binding authoritative
  *****************************************/
 resource "google_kms_key_ring_iam_binding" "kms_key_ring_iam_authoritative" {
-  count = "${local.kms_key_rings_authoritative_iam ? length(local.bindings_array) : 0}"
+  count = local.kms_key_rings_authoritative_iam ? length(local.bindings_array) : 0
 
-  key_ring_id = "${element(split(" ", local.bindings_array[count.index]), 0)}"
-  role        = "${element(split(" ", local.bindings_array[count.index]), 1)}"
+  key_ring_id = element(split(" ", local.bindings_array[count.index]), 0)
+  role        = element(split(" ", local.bindings_array[count.index]), 1)
 
-  members = [
-    "${compact(split(" ", element(split("=", local.bindings_array[count.index]), 1)))}",
-  ]
+  members = compact(
+    split(
+      " ",
+      element(split("=", local.bindings_array[count.index]), 1),
+    ),
+  )
 }
 
 /******************************************
   Kms Key Ring IAM binding additive
  *****************************************/
 resource "google_kms_key_ring_iam_member" "kms_key_ring_iam_additive" {
-  count = "${local.kms_key_rings_additive_iam ? length(local.bindings_array) : 0}"
+  count = local.kms_key_rings_additive_iam ? length(local.bindings_array) : 0
 
-  key_ring_id = "${element(split(" ", local.bindings_array[count.index]), 0)}"
-  member      = "${element(split(" ", local.bindings_array[count.index]), 1)}"
-  role        = "${element(split(" ", local.bindings_array[count.index]), 2)}"
+  key_ring_id = element(split(" ", local.bindings_array[count.index]), 0)
+  member      = element(split(" ", local.bindings_array[count.index]), 1)
+  role        = element(split(" ", local.bindings_array[count.index]), 2)
 }
+
diff --git a/main.tf b/main.tf
index ca667cc..1f34e90 100644
--- a/main.tf
+++ b/main.tf
@@ -18,44 +18,63 @@
   Locals configuration for module logic
  *****************************************/
 locals {
-  authoritative                          = "${var.mode == "authoritative"}"
-  additive                               = "${var.mode == "additive"}"
-  projects_authoritative_iam             = "${length(var.projects) > 0 && local.authoritative}"
-  folders_authoritative_iam              = "${length(var.folders) > 0 && local.authoritative}"
-  organizations_authoritative_iam        = "${length(var.organizations) > 0 && local.authoritative}"
-  service_accounts_authoritative_iam     = "${length(var.service_accounts) > 0 && local.authoritative}"
-  pubsub_topics_authoritative_iam        = "${length(var.pubsub_topics) > 0 && local.authoritative}"
-  pubsub_subscriptions_authoritative_iam = "${length(var.pubsub_subscriptions) > 0  && local.authoritative}"
-  storage_buckets_authoritative_iam      = "${length(var.storage_buckets) > 0 && local.authoritative}"
-  subnets_authoritative_iam              = "${length(var.subnets) > 0 && local.authoritative}"
-  kms_key_rings_authoritative_iam        = "${length(var.kms_key_rings) > 0 && local.authoritative}"
-  kms_cryto_keys_authoritative_iam       = "${length(var.kms_crypto_keys) > 0 && local.authoritative}"
-  projects_additive_iam                  = "${length(var.projects) > 0 && local.additive}"
-  folders_additive_iam                   = "${length(var.folders) > 0 && local.additive}"
-  organizations_additive_iam             = "${length(var.organizations) > 0 && local.additive}"
-  service_accounts_additive_iam          = "${length(var.service_accounts) > 0 && local.additive}"
-  pubsub_topics_additive_iam             = "${length(var.pubsub_topics) > 0 && local.additive}"
-  pubsub_subscriptions_additive_iam      = "${length(var.pubsub_subscriptions) > 0 && local.additive}"
-  storage_buckets_additive_iam           = "${length(var.storage_buckets) > 0 && local.additive}"
-  subnets_additive_iam                   = "${length(var.subnets) > 0 && local.additive}"
-  kms_key_rings_additive_iam             = "${length(var.kms_key_rings) > 0 && local.additive}"
-  kms_cryto_keys_additive_iam            = "${length(var.kms_crypto_keys) > 0  && local.additive}"
+  authoritative                          = var.mode == "authoritative"
+  additive                               = var.mode == "additive"
+  projects_authoritative_iam             = length(var.projects) > 0 && local.authoritative
+  folders_authoritative_iam              = length(var.folders) > 0 && local.authoritative
+  organizations_authoritative_iam        = length(var.organizations) > 0 && local.authoritative
+  service_accounts_authoritative_iam     = length(var.service_accounts) > 0 && local.authoritative
+  pubsub_topics_authoritative_iam        = length(var.pubsub_topics) > 0 && local.authoritative
+  pubsub_subscriptions_authoritative_iam = length(var.pubsub_subscriptions) > 0 && local.authoritative
+  storage_buckets_authoritative_iam      = length(var.storage_buckets) > 0 && local.authoritative
+  subnets_authoritative_iam              = length(var.subnets) > 0 && local.authoritative
+  kms_key_rings_authoritative_iam        = length(var.kms_key_rings) > 0 && local.authoritative
+  kms_cryto_keys_authoritative_iam       = length(var.kms_crypto_keys) > 0 && local.authoritative
+  projects_additive_iam                  = length(var.projects) > 0 && local.additive
+  folders_additive_iam                   = length(var.folders) > 0 && local.additive
+  organizations_additive_iam             = length(var.organizations) > 0 && local.additive
+  service_accounts_additive_iam          = length(var.service_accounts) > 0 && local.additive
+  pubsub_topics_additive_iam             = length(var.pubsub_topics) > 0 && local.additive
+  pubsub_subscriptions_additive_iam      = length(var.pubsub_subscriptions) > 0 && local.additive
+  storage_buckets_additive_iam           = length(var.storage_buckets) > 0 && local.additive
+  subnets_additive_iam                   = length(var.subnets) > 0 && local.additive
+  kms_key_rings_additive_iam             = length(var.kms_key_rings) > 0 && local.additive
+  kms_cryto_keys_additive_iam            = length(var.kms_crypto_keys) > 0 && local.additive
 
   # In order to retrieve the project from the provider, this variable takes it from a data source (google_project.project_from_provider) and avoid an error if the count for that resource is 0
-  take_project_from_provider = "${var.project == "" && length(var.organizations) == 0 && length(var.folders) == 0 && length(var.projects) == 0  && length(var.storage_buckets) == 0 && length(var.kms_crypto_keys) == 0 && length(var.kms_key_rings) == 0 && length(var.subnets) == 0}"
-  resources_project_tmp      = "${element(coalescelist(data.google_project.project_from_provider.*.project_id, list("")), 1)}"
-  resources_project          = "${local.take_project_from_provider ? local.resources_project_tmp : var.project}"
+  take_project_from_provider = var.project == "" && length(var.organizations) == 0 && length(var.folders) == 0 && length(var.projects) == 0 && length(var.storage_buckets) == 0 && length(var.kms_crypto_keys) == 0 && length(var.kms_key_rings) == 0 && length(var.subnets) == 0
+  resources_project_tmp = element(
+    coalescelist(data.google_project.project_from_provider.*.project_id, [""]),
+    1,
+  )
+  resources_project = local.take_project_from_provider ? local.resources_project_tmp : var.project
 
   # Selects the affected resources array
-  objects_affected = "${coalescelist(var.storage_buckets, var.organizations, var.folders, var.projects, var.subnets, var.service_accounts, var.pubsub_topics, var.pubsub_subscriptions, var.kms_key_rings, var.kms_crypto_keys)}"
+  objects_affected = coalescelist(
+    var.storage_buckets,
+    var.organizations,
+    var.folders,
+    var.projects,
+    var.subnets,
+    var.service_accounts,
+    var.pubsub_topics,
+    var.pubsub_subscriptions,
+    var.kms_key_rings,
+    var.kms_crypto_keys,
+  )
 
   #objects_affected = "${coalescelist(list(var.storage_buckets), list(var.organizations))}"
 
   # Please see the data.external.additive_bindings_temp_struct resource for information about the behavior of the variables below
-  bindings_array          = "${compact(split(",", data.external.additive_bindings_temp_struct.result["data"]))}"
-  service_accounts_passed = "${local.service_accounts_authoritative_iam || local.service_accounts_additive_iam ? "1" : "0" }"
-  kms_crypto_keys_passed  = "${local.kms_cryto_keys_additive_iam || local.kms_cryto_keys_authoritative_iam ? "1" : "0"}"
-  kms_key_rings_passed    = "${local.kms_key_rings_additive_iam || local.kms_key_rings_authoritative_iam ? "1" : "0"}"
+  bindings_array = compact(
+    split(
+      ",",
+      data.external.additive_bindings_temp_struct.result["data"],
+    ),
+  )
+  service_accounts_passed = local.service_accounts_authoritative_iam || local.service_accounts_additive_iam ? "1" : "0"
+  kms_crypto_keys_passed  = local.kms_cryto_keys_additive_iam || local.kms_cryto_keys_authoritative_iam ? "1" : "0"
+  kms_key_rings_passed    = local.kms_key_rings_additive_iam || local.kms_key_rings_authoritative_iam ? "1" : "0"
 }
 
 /******************************************
@@ -108,7 +127,7 @@ data "external" "additive_bindings_temp_struct" {
  *
  */
 
-  program = ["bash", "${path.module}/scripts/create_additive_authoritative_structures.sh", "${var.mode}", "${jsonencode(var.bindings)}", "${jsonencode(local.objects_affected)}", "${local.resources_project == "" ? "-1" : local.resources_project}", "${local.service_accounts_passed}", "${local.kms_key_rings_passed}", "${local.kms_crypto_keys_passed}"]
+  program = ["bash", "${path.module}/scripts/create_additive_authoritative_structures.sh", var.mode, jsonencode(var.bindings), jsonencode(local.objects_affected), local.resources_project == "" ? "-1" : local.resources_project, local.service_accounts_passed, local.kms_key_rings_passed, local.kms_crypto_keys_passed]
 }
 
 /******************************************
@@ -116,5 +135,6 @@ data "external" "additive_bindings_temp_struct" {
  *****************************************/
 data "google_project" "project_from_provider" {
   # Only if the project is not specified as a variable, we need the take it from the provider with this resource.
-  count = "${local.take_project_from_provider ? 1 : 0}"
+  count = local.take_project_from_provider ? 1 : 0
 }
+
diff --git a/organizations_iam.tf b/organizations_iam.tf
index 191c63c..4f4e5f2 100644
--- a/organizations_iam.tf
+++ b/organizations_iam.tf
@@ -18,23 +18,27 @@
   Organization IAM binding authoritative
  *****************************************/
 resource "google_organization_iam_binding" "organization_iam_authoritative" {
-  count = "${local.organizations_authoritative_iam ? length(local.bindings_array) : 0}"
+  count = local.organizations_authoritative_iam ? length(local.bindings_array) : 0
 
-  org_id = "${element(split(" ", local.bindings_array[count.index]), 0)}"
-  role   = "${element(split(" ", local.bindings_array[count.index]), 1)}"
+  org_id = element(split(" ", local.bindings_array[count.index]), 0)
+  role   = element(split(" ", local.bindings_array[count.index]), 1)
 
-  members = [
-    "${compact(split(" ", element(split("=", local.bindings_array[count.index]), 1)))}",
-  ]
+  members = compact(
+    split(
+      " ",
+      element(split("=", local.bindings_array[count.index]), 1),
+    ),
+  )
 }
 
 /******************************************
   Organization IAM binding additive
  *****************************************/
 resource "google_organization_iam_member" "organization_iam_additive" {
-  count = "${local.organizations_additive_iam ? length(local.bindings_array) : 0}"
+  count = local.organizations_additive_iam ? length(local.bindings_array) : 0
 
-  org_id = "${element(split(" ", local.bindings_array[count.index]), 0)}"
-  member = "${element(split(" ", local.bindings_array[count.index]), 1)}"
-  role   = "${element(split(" ", local.bindings_array[count.index]), 2)}"
+  org_id = element(split(" ", local.bindings_array[count.index]), 0)
+  member = element(split(" ", local.bindings_array[count.index]), 1)
+  role   = element(split(" ", local.bindings_array[count.index]), 2)
 }
+
diff --git a/projects_iam.tf b/projects_iam.tf
index 4e923db..3cfca93 100644
--- a/projects_iam.tf
+++ b/projects_iam.tf
@@ -18,23 +18,27 @@
   Project IAM binding authoritative
  *****************************************/
 resource "google_project_iam_binding" "project_iam_authoritative" {
-  count = "${local.projects_authoritative_iam ? length(local.bindings_array) : 0}"
+  count = local.projects_authoritative_iam ? length(local.bindings_array) : 0
 
-  project = "${element(split(" ", local.bindings_array[count.index]), 0)}"
-  role    = "${element(split(" ", local.bindings_array[count.index]), 1)}"
+  project = element(split(" ", local.bindings_array[count.index]), 0)
+  role    = element(split(" ", local.bindings_array[count.index]), 1)
 
-  members = [
-    "${compact(split(" ", element(split("=", local.bindings_array[count.index]), 1)))}",
-  ]
+  members = compact(
+    split(
+      " ",
+      element(split("=", local.bindings_array[count.index]), 1),
+    ),
+  )
 }
 
 /******************************************
   Project IAM binding additive
  *****************************************/
 resource "google_project_iam_member" "project_iam_additive" {
-  count = "${local.projects_additive_iam ? length(local.bindings_array) : 0}"
+  count = local.projects_additive_iam ? length(local.bindings_array) : 0
 
-  project = "${element(split(" ", local.bindings_array[count.index]), 0)}"
-  member  = "${element(split(" ", local.bindings_array[count.index]), 1)}"
-  role    = "${element(split(" ", local.bindings_array[count.index]), 2)}"
+  project = element(split(" ", local.bindings_array[count.index]), 0)
+  member  = element(split(" ", local.bindings_array[count.index]), 1)
+  role    = element(split(" ", local.bindings_array[count.index]), 2)
 }
+
diff --git a/pubsub_subscriptions_iam.tf b/pubsub_subscriptions_iam.tf
index c79c371..a8485e5 100644
--- a/pubsub_subscriptions_iam.tf
+++ b/pubsub_subscriptions_iam.tf
@@ -18,25 +18,29 @@
   Pubsub subscription IAM binding authoritative
  *****************************************/
 resource "google_pubsub_subscription_iam_binding" "pubsub_subscription_iam_authoritative" {
-  count = "${local.pubsub_subscriptions_authoritative_iam ? length(local.bindings_array) : 0}"
+  count = local.pubsub_subscriptions_authoritative_iam ? length(local.bindings_array) : 0
 
-  subscription = "${element(split(" ", local.bindings_array[count.index]), 0)}"
-  project      = "${local.resources_project}"
-  role         = "${element(split(" ", local.bindings_array[count.index]), 1)}"
+  subscription = element(split(" ", local.bindings_array[count.index]), 0)
+  project      = local.resources_project
+  role         = element(split(" ", local.bindings_array[count.index]), 1)
 
-  members = [
-    "${compact(split(" ", element(split("=", local.bindings_array[count.index]), 1)))}",
-  ]
+  members = compact(
+    split(
+      " ",
+      element(split("=", local.bindings_array[count.index]), 1),
+    ),
+  )
 }
 
 /******************************************
   Pubsub subscription IAM binding additive
  *****************************************/
 resource "google_pubsub_subscription_iam_member" "pubsub_subscription_iam_additive" {
-  count = "${local.pubsub_subscriptions_additive_iam ? length(local.bindings_array) : 0}"
+  count = local.pubsub_subscriptions_additive_iam ? length(local.bindings_array) : 0
 
-  subscription = "${element(split(" ", local.bindings_array[count.index]), 0)}"
-  project      = "${local.resources_project}"
-  member       = "${element(split(" ", local.bindings_array[count.index]), 1)}"
-  role         = "${element(split(" ", local.bindings_array[count.index]), 2)}"
+  subscription = element(split(" ", local.bindings_array[count.index]), 0)
+  project      = local.resources_project
+  member       = element(split(" ", local.bindings_array[count.index]), 1)
+  role         = element(split(" ", local.bindings_array[count.index]), 2)
 }
+
diff --git a/pubsub_topics_iam.tf b/pubsub_topics_iam.tf
index c67a782..6bec6fe 100644
--- a/pubsub_topics_iam.tf
+++ b/pubsub_topics_iam.tf
@@ -18,25 +18,29 @@
   Pubsub topic IAM binding authoritative
  *****************************************/
 resource "google_pubsub_topic_iam_binding" "pubsub_topic_iam_authoritative" {
-  count = "${local.pubsub_topics_authoritative_iam ? length(local.bindings_array) : 0}"
+  count = local.pubsub_topics_authoritative_iam ? length(local.bindings_array) : 0
 
-  topic   = "${element(split(" ", local.bindings_array[count.index]), 0)}"
-  project = "${local.resources_project}"
-  role    = "${element(split(" ", local.bindings_array[count.index]), 1)}"
+  topic   = element(split(" ", local.bindings_array[count.index]), 0)
+  project = local.resources_project
+  role    = element(split(" ", local.bindings_array[count.index]), 1)
 
-  members = [
-    "${compact(split(" ", element(split("=", local.bindings_array[count.index]), 1)))}",
-  ]
+  members = compact(
+    split(
+      " ",
+      element(split("=", local.bindings_array[count.index]), 1),
+    ),
+  )
 }
 
 /******************************************
   Pubsub topic IAM binding additive
  *****************************************/
 resource "google_pubsub_topic_iam_member" "pubsub_topic_iam_additive" {
-  count = "${local.pubsub_topics_additive_iam ? length(local.bindings_array) : 0}"
+  count = local.pubsub_topics_additive_iam ? length(local.bindings_array) : 0
 
-  topic   = "${element(split(" ", local.bindings_array[count.index]), 0)}"
-  project = "${local.resources_project}"
-  member  = "${element(split(" ", local.bindings_array[count.index]), 1)}"
-  role    = "${element(split(" ", local.bindings_array[count.index]), 2)}"
+  topic   = element(split(" ", local.bindings_array[count.index]), 0)
+  project = local.resources_project
+  member  = element(split(" ", local.bindings_array[count.index]), 1)
+  role    = element(split(" ", local.bindings_array[count.index]), 2)
 }
+
diff --git a/service_accounts_iam.tf b/service_accounts_iam.tf
index c0880fb..d4b2b41 100644
--- a/service_accounts_iam.tf
+++ b/service_accounts_iam.tf
@@ -18,23 +18,27 @@
   Service Account IAM binding authoritative
  *****************************************/
 resource "google_service_account_iam_binding" "service_account_iam_authoritative" {
-  count = "${local.service_accounts_authoritative_iam ? length(local.bindings_array) : 0}"
+  count = local.service_accounts_authoritative_iam ? length(local.bindings_array) : 0
 
-  service_account_id = "${element(split(" ", local.bindings_array[count.index]), 0)}"
-  role               = "${element(split(" ", local.bindings_array[count.index]), 1)}"
+  service_account_id = element(split(" ", local.bindings_array[count.index]), 0)
+  role               = element(split(" ", local.bindings_array[count.index]), 1)
 
-  members = [
-    "${compact(split(" ", element(split("=", local.bindings_array[count.index]), 1)))}",
-  ]
+  members = compact(
+    split(
+      " ",
+      element(split("=", local.bindings_array[count.index]), 1),
+    ),
+  )
 }
 
 /******************************************
   Service Account IAM binding additive
  *****************************************/
 resource "google_service_account_iam_member" "service_account_iam_additive" {
-  count = "${local.service_accounts_additive_iam ? length(local.bindings_array) : 0}"
+  count = local.service_accounts_additive_iam ? length(local.bindings_array) : 0
 
-  service_account_id = "${element(split(" ", local.bindings_array[count.index]), 0)}"
-  member             = "${element(split(" ", local.bindings_array[count.index]), 1)}"
-  role               = "${element(split(" ", local.bindings_array[count.index]), 2)}"
+  service_account_id = element(split(" ", local.bindings_array[count.index]), 0)
+  member             = element(split(" ", local.bindings_array[count.index]), 1)
+  role               = element(split(" ", local.bindings_array[count.index]), 2)
 }
+
diff --git a/storage_buckets_iam.tf b/storage_buckets_iam.tf
index 6db0ab8..c4ff752 100644
--- a/storage_buckets_iam.tf
+++ b/storage_buckets_iam.tf
@@ -18,23 +18,27 @@
   Storage bucket IAM binding authoritative
  *****************************************/
 resource "google_storage_bucket_iam_binding" "storage_bucket_iam_authoritative" {
-  count = "${local.storage_buckets_authoritative_iam ? length(local.bindings_array) : 0}"
+  count = local.storage_buckets_authoritative_iam ? length(local.bindings_array) : 0
 
-  bucket = "${element(split(" ", local.bindings_array[count.index]), 0)}"
-  role   = "${element(split(" ", local.bindings_array[count.index]), 1)}"
+  bucket = element(split(" ", local.bindings_array[count.index]), 0)
+  role   = element(split(" ", local.bindings_array[count.index]), 1)
 
-  members = [
-    "${compact(split(" ", element(split("=", local.bindings_array[count.index]), 1)))}",
-  ]
+  members = compact(
+    split(
+      " ",
+      element(split("=", local.bindings_array[count.index]), 1),
+    ),
+  )
 }
 
 /******************************************
   Storage bucket IAM binding additive
  *****************************************/
 resource "google_storage_bucket_iam_member" "storage_bucket_iam_additive" {
-  count = "${local.storage_buckets_additive_iam ? length(local.bindings_array) : 0}"
+  count = local.storage_buckets_additive_iam ? length(local.bindings_array) : 0
 
-  bucket = "${element(split(" ", local.bindings_array[count.index]), 0)}"
-  member = "${element(split(" ", local.bindings_array[count.index]), 1)}"
-  role   = "${element(split(" ", local.bindings_array[count.index]), 2)}"
+  bucket = element(split(" ", local.bindings_array[count.index]), 0)
+  member = element(split(" ", local.bindings_array[count.index]), 1)
+  role   = element(split(" ", local.bindings_array[count.index]), 2)
 }
+
diff --git a/subnets_iam.tf b/subnets_iam.tf
index 0d57fe7..1f926d8 100644
--- a/subnets_iam.tf
+++ b/subnets_iam.tf
@@ -18,29 +18,69 @@
   Subnet IAM binding authoritative
  *****************************************/
 resource "google_compute_subnetwork_iam_binding" "subnet_iam_authoritative" {
-  provider = "google-beta"
-  count    = "${local.subnets_authoritative_iam ? length(local.bindings_array) : 0}"
+  provider = google-beta
+  count    = local.subnets_authoritative_iam ? length(local.bindings_array) : 0
 
-  subnetwork = "${element(split("/", element(split(" ", local.bindings_array[count.index]), 0)), 5)}"
-  region     = "${element(split("/", element(split(" ", local.bindings_array[count.index]), 0)), 3)}"
-  project    = "${element(split("/", element(split(" ", local.bindings_array[count.index]), 0)), 1)}"
-  role       = "${element(split(" ", local.bindings_array[count.index]), 1)}"
+  subnetwork = element(
+    split(
+      "/",
+      element(split(" ", local.bindings_array[count.index]), 0),
+    ),
+    5,
+  )
+  region = element(
+    split(
+      "/",
+      element(split(" ", local.bindings_array[count.index]), 0),
+    ),
+    3,
+  )
+  project = element(
+    split(
+      "/",
+      element(split(" ", local.bindings_array[count.index]), 0),
+    ),
+    1,
+  )
+  role = element(split(" ", local.bindings_array[count.index]), 1)
 
-  members = [
-    "${compact(split(" ", element(split("=", local.bindings_array[count.index]), 1)))}",
-  ]
+  members = compact(
+    split(
+      " ",
+      element(split("=", local.bindings_array[count.index]), 1),
+    ),
+  )
 }
 
 /******************************************
   Subnet IAM binding additive
  *****************************************/
 resource "google_compute_subnetwork_iam_member" "subnet_iam_additive" {
-  provider = "google-beta"
-  count    = "${local.subnets_additive_iam ? length(local.bindings_array) : 0}"
+  provider = google-beta
+  count    = local.subnets_additive_iam ? length(local.bindings_array) : 0
 
-  subnetwork = "${element(split("/", element(split(" ", local.bindings_array[count.index]), 0)), 5)}"
-  region     = "${element(split("/", element(split(" ", local.bindings_array[count.index]), 0)), 3)}"
-  project    = "${element(split("/", element(split(" ", local.bindings_array[count.index]), 0)), 1)}"
-  member     = "${element(split(" ", local.bindings_array[count.index]), 1)}"
-  role       = "${element(split(" ", local.bindings_array[count.index]), 2)}"
+  subnetwork = element(
+    split(
+      "/",
+      element(split(" ", local.bindings_array[count.index]), 0),
+    ),
+    5,
+  )
+  region = element(
+    split(
+      "/",
+      element(split(" ", local.bindings_array[count.index]), 0),
+    ),
+    3,
+  )
+  project = element(
+    split(
+      "/",
+      element(split(" ", local.bindings_array[count.index]), 0),
+    ),
+    1,
+  )
+  member = element(split(" ", local.bindings_array[count.index]), 1)
+  role   = element(split(" ", local.bindings_array[count.index]), 2)
 }
+
diff --git a/test/ci_integration.sh b/test/ci_integration.sh
new file mode 100755
index 0000000..7b1a822
--- /dev/null
+++ b/test/ci_integration.sh
@@ -0,0 +1,76 @@
+#!/usr/bin/env bash
+
+# Copyright 2018 Google LLC
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Always clean up.
+DELETE_AT_EXIT="$(mktemp -d)"
+finish() {
+  echo 'BEGIN: finish() trap handler' >&2
+  kitchen destroy "$SUITE"
+  [[ -d "${DELETE_AT_EXIT}" ]] && rm -rf "${DELETE_AT_EXIT}"
+  echo 'END: finish() trap handler' >&2
+}
+
+# Map the input parameters provided by Concourse CI, or whatever mechanism is
+# running the tests to Terraform input variables.  Also setup credentials for
+# use with kitchen-terraform, inspec, and gcloud.
+setup_environment() {
+  local tmpfile
+  tmpfile="$(mktemp)"
+  echo "${SERVICE_ACCOUNT_JSON}" > "${tmpfile}"
+
+  # gcloud variables
+  export CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE="${tmpfile}"
+  # Application default credentials (Terraform google provider and inspec-gcp)
+  export GOOGLE_APPLICATION_CREDENTIALS="${tmpfile}"
+
+  # Terraform variables
+  export TF_VAR_project_id="$PROJECT_ID"
+}
+
+main() {
+  export SUITE="${SUITE:-}"
+
+  set -eu
+  # Setup trap handler to auto-cleanup
+  export TMPDIR="${DELETE_AT_EXIT}"
+  trap finish EXIT
+
+  # Setup environment variables
+  setup_environment
+  set -x
+
+  # Execute the test lifecycle
+  rm -fv "test/fixtures/full/iam.tf"
+
+  kitchen create "$SUITE"
+  kitchen converge "$SUITE" || true
+  # First converge fails, give delay before the 2-nd attempt,
+  # to allow activation of the api being finished
+  sleep 30
+  kitchen converge "$SUITE"
+
+  # add test fixtures and apply them (for the details see the module's readme page)
+  cp "test/fixtures/full/iam.tf.mv" "test/fixtures/full/iam.tf"
+  kitchen create "$SUITE"
+  kitchen converge "$SUITE"
+  kitchen verify "$SUITE"
+}
+
+# if script is being executed and not sourced.
+if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
+  main "$@"
+fi
+
diff --git a/test/fixtures/full/base/main.tf b/test/fixtures/full/base/main.tf
index 7065052..aafa4ad 100644
--- a/test/fixtures/full/base/main.tf
+++ b/test/fixtures/full/base/main.tf
@@ -23,7 +23,7 @@ locals {
 # Folders
 
 resource "google_folder" "test" {
-  count = "${local.n}"
+  count = local.n
 
   display_name = "Test IAM Folder ${count.index}"
   parent       = "organizations/${var.org_id}"
@@ -32,17 +32,17 @@ resource "google_folder" "test" {
 # Projects
 
 resource "random_id" "test" {
-  count = "${local.n}"
+  count = local.n
 
   byte_length = 2
 }
 
 resource "google_project" "test" {
-  count = "${local.n}"
+  count = local.n
 
-  project_id      = "${local.prefix}-prj-${count.index}-${random_id.test.*.hex[count.index]}"
-  org_id          = "${var.org_id}"
-  billing_account = "${var.billing_account}"
+  project_id      = "${local.prefix}-prj-${count.index}-${random_id.test[count.index].hex}"
+  org_id          = var.org_id
+  billing_account = var.billing_account
 
   name = "Test IAM Project ${count.index}"
 }
@@ -50,76 +50,77 @@ resource "google_project" "test" {
 # Service Accounts
 
 resource "google_service_account" "test" {
-  count = "${local.n}"
+  count = local.n
 
-  project = "${google_project.test.*.project_id[0]}"
+  project = google_project.test[0].project_id
 
-  account_id = "${local.prefix}-svcacct-${count.index}-${random_id.test.*.hex[count.index]}"
+  account_id = "${local.prefix}-svcacct-${count.index}-${random_id.test[count.index].hex}"
 }
 
 # Buckets
 
 resource "google_storage_bucket" "test" {
-  count = "${local.n}"
+  count = local.n
 
-  project = "${google_project.test.*.project_id[0]}"
+  project = google_project.test[0].project_id
 
-  name = "${local.prefix}-bkt-${count.index}-${random_id.test.*.hex[count.index]}"
+  name = "${local.prefix}-bkt-${count.index}-${random_id.test[count.index].hex}"
 }
 
 # KMS
 
 resource "google_project_service" "kms" {
-  count = "${local.n}"
+  count = local.n
 
-  project = "${google_project.test.*.project_id[count.index]}"
+  project = google_project.test[count.index].project_id
   service = "cloudkms.googleapis.com"
 }
 
 resource "google_kms_key_ring" "test" {
-  count = "${local.n}"
+  count = local.n
 
-  depends_on = ["google_project_service.kms"]
+  depends_on = [google_project_service.kms]
 
-  project = "${google_project.test.*.project_id[0]}"
+  project = google_project.test[0].project_id
 
-  name     = "${local.prefix}-keyrng-${count.index}-${random_id.test.*.hex[count.index]}"
-  location = "${local.location}"
+  name     = "${local.prefix}-keyrng-${count.index}-${random_id.test[count.index].hex}"
+  location = local.location
 }
 
 resource "google_kms_crypto_key" "test" {
-  count = "${local.n}"
+  count = local.n
 
-  name = "${local.prefix}-key-${count.index}-${random_id.test.*.hex[count.index]}"
+  name = "${local.prefix}-key-${count.index}-${random_id.test[count.index].hex}"
 
-  key_ring = "${google_kms_key_ring.test.*.self_link[count.index]}"
+  key_ring = google_kms_key_ring.test[count.index].self_link
 }
 
 # Pubsub
 
 resource "google_pubsub_topic" "test" {
-  count = "${local.n}"
+  count = local.n
 
-  project = "${google_project.test.*.project_id[0]}"
+  project = google_project.test[0].project_id
 
-  name = "${local.prefix}-tpc-${count.index}-${random_id.test.*.hex[count.index]}"
+  name = "${local.prefix}-tpc-${count.index}-${random_id.test[count.index].hex}"
 }
 
 resource "google_pubsub_subscription" "test" {
-  count = "${local.n}"
+  count = local.n
 
-  project = "${google_project.test.*.project_id[0]}"
+  project = google_project.test[0].project_id
 
-  topic = "${google_pubsub_topic.test.*.name[count.index]}"
-  name  = "${local.prefix}-sub-${count.index}-${random_id.test.*.hex[count.index]}"
+  topic = google_pubsub_topic.test[count.index].name
+  name  = "${local.prefix}-sub-${count.index}-${random_id.test[count.index].hex}"
 }
 
 # Members
 
 resource "google_service_account" "member" {
-  count = "${local.n}"
+  count = local.n
 
-  project = "${google_project.test.*.project_id[count.index]}"
+  project = google_project.test[count.index].project_id
 
-  account_id = "${local.prefix}-member-${count.index}-${random_id.test.*.hex[count.index]}"
+  account_id = "${local.prefix}-member-${count.index}-${random_id.test[count.index].hex}"
 }
+
diff --git a/test/fixtures/full/base/outputs.tf b/test/fixtures/full/base/outputs.tf
index 81f9508..51efedb 100644
--- a/test/fixtures/full/base/outputs.tf
+++ b/test/fixtures/full/base/outputs.tf
@@ -15,50 +15,51 @@
  */
 
 output "projects" {
-  value       = ["${google_project.test.*.project_id}"]
+  value       = google_project.test.*.project_id
   description = "Projects created for bindings."
 }
 
 output "folders" {
   value = [
-    "${replace("${google_folder.test.0.name}", "folders/", "")}",
-    "${replace("${google_folder.test.1.name}", "folders/", "")}",
+    replace(google_folder.test[0].name, "folders/", ""),
+    replace(google_folder.test[1].name, "folders/", ""),
   ]
 
   description = "Folders created for bindings."
 }
 
 output "service_accounts" {
-  value       = ["${google_service_account.test.*.email}"]
+  value       = google_service_account.test.*.email
   description = "Service accounts created for bindings."
 }
 
 output "members" {
-  value       = ["${google_service_account.member.*.email}"]
+  value       = google_service_account.member.*.email
   description = "Members created for binding with roles."
 }
 
 output "buckets" {
-  value       = ["${google_storage_bucket.test.*.name}"]
+  value       = google_storage_bucket.test.*.name
   description = "Storage buckets created for bindings."
 }
 
 output "key_rings" {
-  value       = ["${google_kms_key_ring.test.*.self_link}"]
+  value       = google_kms_key_ring.test.*.self_link
   description = "Key rings created for bindings."
 }
 
 output "keys" {
-  value       = ["${google_kms_crypto_key.test.*.self_link}"]
+  value       = google_kms_crypto_key.test.*.self_link
   description = "Crypto keys created for bindings."
 }
 
 output "topics" {
-  value       = ["${google_pubsub_topic.test.*.name}"]
+  value       = google_pubsub_topic.test.*.name
   description = "Pubsub topics created for bindings."
 }
 
 output "subscriptions" {
-  value       = ["${google_pubsub_subscription.test.*.name}"]
+  value       = google_pubsub_subscription.test.*.name
   description = "Pubsub subscriptions created for bindings."
 }
+
diff --git a/test/fixtures/full/base/variables.tf b/test/fixtures/full/base/variables.tf
index 49293f7..a11bad5 100644
--- a/test/fixtures/full/base/variables.tf
+++ b/test/fixtures/full/base/variables.tf
@@ -21,3 +21,4 @@ variable "org_id" {
 variable "billing_account" {
   description = "Billing account to associate created projects with."
 }
+
diff --git a/test/fixtures/full/base/versions.tf b/test/fixtures/full/base/versions.tf
new file mode 100644
index 0000000..ac97c6a
--- /dev/null
+++ b/test/fixtures/full/base/versions.tf
@@ -0,0 +1,4 @@
+
+terraform {
+  required_version = ">= 0.12"
+}
diff --git a/test/fixtures/full/iam.tf.mv b/test/fixtures/full/iam.tf.mv
index 5004a03..a6663a6 100644
--- a/test/fixtures/full/iam.tf.mv
+++ b/test/fixtures/full/iam.tf.mv
@@ -16,103 +16,104 @@
 
 locals {
   subnets = [
-    "projects/${google_project_service.compute.0.project}/regions/us-central1/subnetworks/default",
-    "projects/${google_project_service.compute.0.project}/regions/us-east1/subnetworks/default",
+    "projects/${google_project_service.compute[0].project}/regions/us-central1/subnetworks/default",
+    "projects/${google_project_service.compute[0].project}/regions/us-east1/subnetworks/default",
   ]
 }
 
 module "iam_binding_project" {
   source   = "../../.."
-  mode     = "${var.mode}"
-  projects = ["${module.base.projects}"]
+  mode     = var.mode
+  projects = module.base.projects
 
-  bindings = "${local.project_bindings}"
+  bindings = local.project_bindings
 }
 
 module "iam_binding_organization" {
   source        = "../../.."
-  mode          = "${var.mode}"
-  organizations = ["${var.org_id}"]
+  mode          = var.mode
+  organizations = [var.org_id]
 
-  bindings = "${local.org_bindings}"
+  bindings = local.org_bindings
 }
 
 module "iam_binding_folder" {
   source  = "../../.."
-  mode    = "${var.mode}"
-  folders = ["${module.base.folders}"]
+  mode    = var.mode
+  folders = module.base.folders
 
-  bindings = "${local.basic_bindings}"
+  bindings = local.basic_bindings
 }
 
 # Needed for iam_binding_subnet.
 resource "google_project_service" "compute" {
-  count = "${length(module.base.projects)}"
+  count = length(module.base.projects)
 
-  project = "${module.base.projects[count.index]}"
+  project = module.base.projects[count.index]
   service = "compute.googleapis.com"
 }
 
 module "iam_binding_subnet" {
   source = "../../.."
-  mode   = "${var.mode}"
+  mode   = var.mode
 
   subnets = [
-    "projects/${google_project_service.compute.0.project}/regions/us-central1/subnetworks/default",
-    "projects/${google_project_service.compute.0.project}/regions/us-east1/subnetworks/default",
+    "projects/${google_project_service.compute[0].project}/regions/us-central1/subnetworks/default",
+    "projects/${google_project_service.compute[0].project}/regions/us-east1/subnetworks/default",
   ]
 
-  bindings = "${local.basic_bindings}"
+  bindings = local.basic_bindings
 }
 
 module "iam_binding_service_account" {
   source = "../../.."
-  mode   = "${var.mode}"
+  mode   = var.mode
 
-  service_accounts = ["${module.base.service_accounts}"]
-  project          = "${module.base.projects[0]}"
+  service_accounts = module.base.service_accounts
+  project          = module.base.projects[0]
 
-  bindings = "${local.basic_bindings}"
+  bindings = local.basic_bindings
 }
 
 module "iam_binding_storage_bucket" {
   source          = "../../.."
-  mode            = "${var.mode}"
-  storage_buckets = ["${module.base.buckets}"]
+  mode            = var.mode
+  storage_buckets = module.base.buckets
 
-  bindings = "${local.bucket_bindings}"
+  bindings = local.bucket_bindings
 }
 
 module "iam_binding_kms_crypto_key" {
   source          = "../../.."
-  mode            = "${var.mode}"
-  kms_crypto_keys = ["${module.base.keys}"]
+  mode            = var.mode
+  kms_crypto_keys = module.base.keys
 
-  bindings = "${local.basic_bindings}"
+  bindings = local.basic_bindings
 }
 
 module "iam_binding_kms_key_ring" {
   source        = "../../.."
-  mode          = "${var.mode}"
-  kms_key_rings = ["${module.base.key_rings}"]
+  mode          = var.mode
+  kms_key_rings = module.base.key_rings
 
-  bindings = "${local.basic_bindings}"
+  bindings = local.basic_bindings
 }
 
 module "iam_binding_pubsub_subscription" {
   source               = "../../.."
-  mode                 = "${var.mode}"
-  pubsub_subscriptions = ["${module.base.subscriptions}"]
-  project              = "${module.base.projects[0]}"
+  mode                 = var.mode
+  pubsub_subscriptions = module.base.subscriptions
+  project              = module.base.projects[0]
 
-  bindings = "${local.basic_bindings}"
+  bindings = local.basic_bindings
 }
 
 module "iam_binding_pubsub_topic" {
   source        = "../../.."
-  mode          = "${var.mode}"
-  pubsub_topics = ["${module.base.topics}"]
-  project       = "${module.base.projects[0]}"
+  mode          = var.mode
+  pubsub_topics = module.base.topics
+  project       = module.base.projects[0]
 
-  bindings = "${local.basic_bindings}"
+  bindings = local.basic_bindings
 }
+
diff --git a/test/fixtures/full/main.tf b/test/fixtures/full/main.tf
index 98acb5b..a482595 100644
--- a/test/fixtures/full/main.tf
+++ b/test/fixtures/full/main.tf
@@ -48,20 +48,22 @@ locals {
     local.bucket_roles[0], local.member_group_0,
     local.bucket_roles[1], local.member_group_1,
   )}"
+
 }
 
 provider "google" {
-  credentials = "${file(var.credentials_file_path)}"
-  version     = "~> 1.20"
+  credentials = file(var.credentials_file_path)
+  version     = "~> 2.7"
 }
 
 provider "google-beta" {
-  credentials = "${file(var.credentials_file_path)}"
-  version     = "~> 1.20"
+  credentials = file(var.credentials_file_path)
+  version     = "~> 2.7"
 }
 
 module "base" {
   source          = "./base"
-  org_id          = "${var.org_id}"
-  billing_account = "${var.billing_account}"
+  org_id          = var.org_id
+  billing_account = var.billing_account
 }
+
diff --git a/test/fixtures/full/outputs.tf b/test/fixtures/full/outputs.tf
index 2ee4e9d..9dc6168 100644
--- a/test/fixtures/full/outputs.tf
+++ b/test/fixtures/full/outputs.tf
@@ -22,85 +22,86 @@ output "credentials_file_path" {
 # Binding Roles
 
 output "basic_roles" {
-  value       = ["${local.basic_roles}"]
+  value       = local.basic_roles
   description = "Basic roles to be assigned to resources."
 }
 
 output "org_roles" {
-  value       = ["${local.org_roles}"]
+  value       = local.org_roles
   description = "Roles to be assigned to organizations."
 }
 
 output "project_roles" {
-  value       = ["${local.project_roles}"]
+  value       = local.project_roles
   description = "Roles to be assigned to projects."
 }
 
 output "bucket_roles" {
-  value       = ["${local.bucket_roles}"]
+  value       = local.bucket_roles
   description = "Roles to be assigned to buckets."
 }
 
 # Binding Members
 
 output "member_group_0" {
-  value       = ["${local.member_group_0}"]
+  value       = local.member_group_0
   description = "Members to be used in bindings."
 }
 
 output "member_group_1" {
-  value       = ["${local.member_group_1}"]
+  value       = local.member_group_1
   description = "Members to be used in bindings."
 }
 
 # Resources
 
 output "projects" {
-  value       = ["${module.base.projects}"]
+  value       = module.base.projects
   description = "Projects created for bindings."
 }
 
 output "folders" {
-  value       = ["${module.base.folders}"]
+  value       = module.base.folders
   description = "Folders created for bindings."
 }
 
 output "subnets" {
-  value       = ["${local.subnets}"]
+  value       = local.subnets
   description = "Subnetworks created for bindings."
 }
 
 output "service_accounts" {
-  value       = ["${module.base.service_accounts}"]
+  value       = module.base.service_accounts
   description = "Service accounts created for bindings."
 }
 
 output "members" {
-  value       = ["${module.base.members}"]
+  value       = module.base.members
   description = "Members created for binding with roles."
 }
 
 output "buckets" {
-  value       = ["${module.base.buckets}"]
+  value       = module.base.buckets
   description = "Storage buckets created for bindings."
 }
 
 output "key_rings" {
-  value       = ["${module.base.key_rings}"]
+  value       = module.base.key_rings
   description = "Key rings created for bindings."
 }
 
 output "keys" {
-  value       = ["${module.base.keys}"]
+  value       = module.base.keys
   description = "Crypto keys created for bindings."
 }
 
 output "topics" {
-  value       = ["${module.base.topics}"]
+  value       = module.base.topics
   description = "Pubsub topics created for bindings."
 }
 
 output "subscriptions" {
-  value       = ["${module.base.subscriptions}"]
+  value       = module.base.subscriptions
   description = "Pubsub subscriptions created for bindings."
 }
+
diff --git a/test/fixtures/full/variables.tf b/test/fixtures/full/variables.tf
index bce086f..274b2da 100644
--- a/test/fixtures/full/variables.tf
+++ b/test/fixtures/full/variables.tf
@@ -30,3 +30,4 @@ variable "org_id" {
 variable "billing_account" {
   description = "Billing account to associate created projects with."
 }
+
diff --git a/test/fixtures/full/versions.tf b/test/fixtures/full/versions.tf
new file mode 100644
index 0000000..ac97c6a
--- /dev/null
+++ b/test/fixtures/full/versions.tf
@@ -0,0 +1,4 @@
+
+terraform {
+  required_version = ">= 0.12"
+}
diff --git a/test/make.sh b/test/make.sh
index 1f94f81..2fdce25 100755
--- a/test/make.sh
+++ b/test/make.sh
@@ -14,83 +14,150 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-# This function checks to make sure that every
-# shebang has a '- e' flag, which causes it
-# to exit on error
-function check_bash() {
-find . -name "*.sh" | while IFS= read -d '' -r file;
-do
-  if [[ "$file" != *"bash -e"* ]];
-  then
-    echo "$file is missing shebang with -e";
-    exit 1;
-  fi;
-done;
+# Please note that this file was generated from [terraform-google-module-template](https://github.com/terraform-google-modules/terraform-google-module-template).
+# Please make sure to contribute relevant changes upstream!
+
+# Create a temporary directory that's auto-cleaned, even if the process aborts.
+DELETE_AT_EXIT="$(mktemp -d)"
+finish() {
+  [[ -d "${DELETE_AT_EXIT}" ]] && rm -rf "${DELETE_AT_EXIT}"
+}
+trap finish EXIT
+# Create a temporary file in the auto-cleaned up directory while avoiding
+# overwriting TMPDIR for other processes.
+# shellcheck disable=SC2120 # (Arguments may be passed, e.g. maketemp -d)
+maketemp() {
+  TMPDIR="${DELETE_AT_EXIT}" mktemp "$@"
+}
+
+# find_files is a helper to exclude .git directories and match only regular
+# files to avoid double-processing symlinks.
+find_files() {
+  local pth="$1"
+  shift
+  find "${pth}" '(' -path '*/.git' -o -path '*/.terraform' ')' \
+    -prune -o -type f "$@"
+}
+
+# Compatibility with both GNU and BSD style xargs.
+compat_xargs() {
+  local compat=()
+  # Test if xargs is GNU or BSD style.  GNU xargs will succeed with status 0
+  # when given --no-run-if-empty and no input on STDIN.  BSD xargs will fail and
+  # exit status non-zero If xargs fails, assume it is BSD style and proceed.
+  # stderr is silently redirected to avoid console log spam.
+  if xargs --no-run-if-empty </dev/null 2>/dev/null; then
+    compat=("--no-run-if-empty")
+  fi
+  xargs "${compat[@]}" "$@"
 }
 
 # This function makes sure that the required files for
 # releasing to OSS are present
 function basefiles() {
-  echo "Checking for required files"
-  test -f LICENSE || echo "Missing LICENSE"
-  test -f README.md || echo "Missing README.md"
+  local fn required_files="LICENSE README.md"
+  echo "Checking for required files ${required_files}"
+  for fn in ${required_files}; do
+    test -f "${fn}" || echo "Missing required file ${fn}"
+  done
 }
 
 # This function runs the hadolint linter on
 # every file named 'Dockerfile'
 function docker() {
   echo "Running hadolint on Dockerfiles"
-  find . -name "Dockerfile" -exec hadolint {} \;
+  find_files . -name "Dockerfile" -print0 \
+    | compat_xargs -0 hadolint
 }
 
-# This function runs 'terraform validate' against all
-# files ending in '.tf'
+# This function runs 'terraform validate' and 'terraform fmt'
+# against all directory paths which contain *.tf files.
 function check_terraform() {
+  set -e
   echo "Running terraform validate"
-  #shellcheck disable=SC2156
-  find . -name "*.tf" -exec bash -c 'terraform validate --check-variables=false $(dirname "{}")' \;
+  find_files . -name "*.tf" -print0 \
+    | compat_xargs -0 -n1 dirname \
+    | sort -u \
+    | compat_xargs -t -n1 terraform validate --check-variables=false
+  echo "Running terraform fmt"
+  find_files . -name "*.tf" -print0 \
+    | compat_xargs -0 -n1 dirname \
+    | sort -u \
+    | compat_xargs -t -n1 terraform fmt -check=true -write=false
 }
 
-# This function runs 'go fmt' and 'go vet' on eery file
+# This function runs 'go fmt' and 'go vet' on every file
 # that ends in '.go'
 function golang() {
   echo "Running go fmt and go vet"
-  find . -name "*.go" -exec go fmt {} \;
-  find . -name "*.go" -exec go vet {} \;
+  find_files . -name "*.go" -print0 | compat_xargs -0 -n1 go fmt
+  find_files . -name "*.go" -print0 | compat_xargs -0 -n1 go vet
 }
 
 # This function runs the flake8 linter on every file
 # ending in '.py'
 function check_python() {
   echo "Running flake8"
-  find . -name "*.py" -exec flake8 {} \;
+  find_files . -name "*.py" -print0 | compat_xargs -0 flake8
+  return 0
 }
 
 # This function runs the shellcheck linter on every
 # file ending in '.sh'
 function check_shell() {
   echo "Running shellcheck"
-  find . -name "*.sh" -exec shellcheck -x {} \;
+  find_files . -name "*.sh" -print0 | compat_xargs -0 shellcheck -x
 }
 
 # This function makes sure that there is no trailing whitespace
 # in any files in the project.
 # There are some exclusions
 function check_trailing_whitespace() {
-  echo "The following lines have trailing whitespace"
-  grep -r '[[:blank:]]$' --exclude-dir=".terraform" --exclude="*.png" --exclude="*.pyc" --exclude-dir=".git" .
+  local rc
+  echo "Checking for trailing whitespace"
+  find_files . -print \
+    | grep -v -E '\.(pyc|png)$' \
+    | compat_xargs grep -H -n '[[:blank:]]$'
   rc=$?
-  if [ $rc = 0 ]; then
-    exit 1
+  if [[ ${rc} -eq 0 ]]; then
+    return 1
   fi
 }
 
 function generate_docs() {
   echo "Generating markdown docs with terraform-docs"
-  TMPFILE=$(mktemp)
-  for j in `for i in $(find . -type f | grep \.tf$) ; do dirname $i ; done | sort -u` ; do
-    terraform-docs markdown $j > $TMPFILE
-    python helpers/combine_docfiles.py $j/README.md $TMPFILE
+  local path tmpfile
+  while read -r path; do
+    if [[ -e "${path}/README.md" ]]; then
+      # shellcheck disable=SC2119
+      tmpfile="$(maketemp)"
+      echo "terraform-docs markdown ${path}"
+      terraform-docs markdown "${path}" > "${tmpfile}"
+      helpers/combine_docfiles.py "${path}"/README.md "${tmpfile}"
+    else
+      echo "Skipping ${path} because README.md does not exist."
+    fi
+  done < <(find_files . -name '*.tf' -print0 \
+    | compat_xargs -0 -n1 dirname \
+    | sort -u)
+}
+
+function prepare_test_variables() {
+  echo "Preparing terraform.tfvars files for integration tests"
+  #shellcheck disable=2044
+  for i in $(find ./test/fixtures -type f -name terraform.tfvars.sample); do
+    destination=${i/%.sample/}
+    if [ ! -f "${destination}" ]; then
+      cp "${i}" "${destination}"
+      echo "${destination} has been created. Please edit it to reflect your GCP configuration."
+    fi
   done
-  rm -f $TMPFILE
 }
+
+function check_headers() {
+  echo "Checking file headers"
+  # Use the exclusion behavior of find_files
+  find_files . -type f -print0 \
+    | compat_xargs -0 python test/verify_boilerplate.py
+}
+
diff --git a/variables.tf b/variables.tf
index 9cc6ef4..eb8ab45 100644
--- a/variables.tf
+++ b/variables.tf
@@ -22,61 +22,61 @@ variable "project" {
 variable "projects" {
   description = "Projects list to add the IAM policies/bindings"
   default     = []
-  type        = "list"
+  type        = list(string)
 }
 
 variable "folders" {
   description = "Folders list to add the IAM policies/bindings"
   default     = []
-  type        = "list"
+  type        = list(string)
 }
 
 variable "organizations" {
   description = "Organizations list to add the IAM policies/bindings"
   default     = []
-  type        = "list"
+  type        = list
 }
 
 variable "service_accounts" {
   description = "Service Accounts list to add the IAM policies/bindings"
   default     = []
-  type        = "list"
+  type        = list(string)
 }
 
 variable "pubsub_topics" {
   description = "Pubsub topics list to add the IAM policies/bindings"
   default     = []
-  type        = "list"
+  type        = list(string)
 }
 
 variable "pubsub_subscriptions" {
   description = "Pubsub subscriptions list to add the IAM policies/bindings"
   default     = []
-  type        = "list"
+  type        = list(string)
 }
 
 variable "storage_buckets" {
   description = "Buckets list to add the IAM policies/bindings"
   default     = []
-  type        = "list"
+  type        = list(string)
 }
 
 variable "subnets" {
   description = "Subnets list to add the IAM policies/bindings"
   default     = []
-  type        = "list"
+  type        = list(string)
 }
 
 variable "kms_key_rings" {
   description = "Kms Key Rings list to add the IAM policies/bindings"
   default     = []
-  type        = "list"
+  type        = list(string)
 }
 
 variable "kms_crypto_keys" {
   description = "Kms Crypto Key list to add the IAM policies/bindings"
   default     = []
-  type        = "list"
+  type        = list(string)
 }
 
 variable "mode" {
@@ -86,5 +86,6 @@ variable "mode" {
 
 variable "bindings" {
   description = "Map of role (key) and list of members (value) to add the IAM policies/bindings"
-  type        = "map"
+  type        = map
 }
+
diff --git a/versions.tf b/versions.tf
new file mode 100644
index 0000000..ac97c6a
--- /dev/null
+++ b/versions.tf
@@ -0,0 +1,4 @@
+
+terraform {
+  required_version = ">= 0.12"
+}
